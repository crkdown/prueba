import Head from "next/head";
import { useEffect, useState } from "react";
import Image from "next/image";
import { useS3Upload } from "next-s3-upload";
import { useCookies } from "react-cookie";
import { COOKIE_ID, MAX_FREE_CREDITS } from "@/utils/const";
import { AnonymousData } from "./_app";
import Upload, { CustomFile } from "@/components/Upload";

const sleep = (ms: number) => new Promise((r) => setTimeout(r, ms));

export default function Home() {
  const [localFile, setLocalFile] = useState<CustomFile>();
  const [s3FileUrl, setS3FileUrl] = useState<string>();
  const [prediction, setPrediction] = useState<any>(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [used, setUsed] = useState<number>();

  const [setImageDimensions, imageDimensions] = useState<{
    width: number;
    height: number;
  }>();

  let { uploadToS3 } = useS3Upload();

  const [cookies, setCookie] = useCookies([COOKIE_ID]);

  const handleUpload = async (file: File) => {
    setLoading(true);

    setLocalFile(
      Object.assign(file, {
        preview: URL.createObjectURL(file),
      })
    );

    let { url } = await uploadToS3(file);
    setS3FileUrl(url);
    // let { height, width } = await getImageData(file);
    console.log("S3 URL", url);

    const response = await fetch("/api/predictions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        image: url,
      }),
    });

    let prediction = await response.json();

    if (response.status !== 201) {
      console.log("some errror", prediction.detail);
      setError(prediction.detail);
      setLoading(false);
      return;
    }

    setPrediction(prediction);
    console.log("prediction", prediction);

    while (
      prediction.status !== "succeeded" &&
      prediction.status !== "failed"
    ) {
      await sleep(1000);
      const response = await fetch("/api/predictions/" + prediction.id);
      prediction = await response.json();
      if (response.status !== 200) {
        setError(prediction.detail);
        setLoading(false);
        return;
      }
      console.log({ prediction });
      setPrediction(prediction);
    }
    setLoading(false);
    const anonymousData = cookies.anonymous_data as AnonymousData;

    setCookie(COOKIE_ID, {
      used: ++anonymousData.used,
    });
  };

  useEffect(() => {
    const anonymousData = cookies.anonymous_data as AnonymousData;
    if (anonymousData) setUsed(anonymousData.used);
    console.log("anonymousData", anonymousData);
  }, [cookies.anonymous_data]);

  useEffect(() => {
    // Make sure to revoke the data uris to avoid memory leaks, will run on unmount
    return () => localFile && URL.revokeObjectURL(localFile.preview);
  }, []);

  return (
    <>
      <Head>
        <title>Background Removal App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="mt-12 border-b border-zinc-800 pb-6">
        <h1 className="text-5xl">Try for free!</h1>
        <p className="pt-2 text-zinc-500">
          Remove the background from up to 10 images, no charge.
        </p>
      </div>
      <div className="my-12 flex gap-12">
        <div className="flex-1">
          <h1 className="mb-5 text-2xl">Upload</h1>
          {localFile && (
            <Image
              alt="uploaded photo"
              src={localFile.preview}
              className="relative mt-2 mb-4 rounded-2xl  sm:mt-0"
              width={475}
              height={475}
            />
          )}
          {localFile && (
            <p className="mb-2">
              {localFile.path} - {localFile.size} bytes
            </p>
          )}

          <Upload
            onUpload={handleUpload}
            disabled={used === MAX_FREE_CREDITS}
          />

          {used != undefined && (
            <p className="mt-2 text-zinc-500">
              {used}/{MAX_FREE_CREDITS} images remaining
            </p>
          )}
        </div>
        <div className="flex-1">
          <h1 className="mb-5 text-2xl">Result</h1>

          {loading && <p>Loading...</p>}

          {prediction && (
            <div>
              {prediction.output && (
                <>
                  <Image
                    src={prediction.output}
                    alt="output"
                    className="relative mt-2 mb-4 rounded-2xl sm:mt-0"
                    width={475}
                    height={475}
                  />
                </>
              )}
            </div>
          )}
        </div>
      </div>
    </>
  );
}
